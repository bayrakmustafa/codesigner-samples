.windows_runners:
  tags:
  - windows

stages:
  - build
  - sign

variables:
  PROJECT_NAME: "HelloWorld"
  PROJECT_VERSION: "0.0.1"
  DOTNET_VERSION: "3.1"
  ENVIRONMENT_NAME: "TEST"

build-dotnet:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:3.1-bullseye
  before_script:
    - mkdir -p ${CI_PROJECT_DIR}/artifacts
    - mkdir -p ${CI_PROJECT_DIR}/packages
  script:
    - dotnet build dotnet/${PROJECT_NAME}.csproj -c Release
    - cp dotnet/bin/Release/netcoreapp${DOTNET_VERSION}/${PROJECT_NAME}-${PROJECT_VERSION}.dll ${CI_PROJECT_DIR}/packages/${PROJECT_NAME}.dll
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/packages/HelloWorld.dll
    expire_in: 5 minutes

build-maven-jar:
  stage: build
  image: maven:3.8.3-openjdk-17
  variables:
    MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
    MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

  before_script:
    - mkdir -p ${CI_PROJECT_DIR}/artifacts
    - mkdir -p ${CI_PROJECT_DIR}/packages
  script:
    - mvn $MAVEN_CLI_OPTS clean install -f java/pom.xml
    - cp java/target/${PROJECT_NAME}-${PROJECT_VERSION}.jar ${CI_PROJECT_DIR}/packages/${PROJECT_NAME}.jar
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/packages/${PROJECT_NAME}.jar
    expire_in: 5 minutes

build-gradle-jar:
  stage: build
  image: gradle:alpine
  variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  before_script:
    - mkdir -p ${CI_PROJECT_DIR}/artifacts
    - mkdir -p ${CI_PROJECT_DIR}/packages
    - GRADLE_USER_HOME="$(pwd)/.gradle"
    - export GRADLE_USER_HOME
  script:
    - gradle clean build -p java -PsetupType=jar
    - cp java/build/libs/${PROJECT_NAME}-${PROJECT_VERSION}.jar ${CI_PROJECT_DIR}/packages/${PROJECT_NAME}.jar
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/packages/${PROJECT_NAME}.jar
    expire_in: 5 minutes

build-gradle-exe:
  stage: build
  extends:
  - .windows_runners
  variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  before_script:
    - mkdir -p ${CI_PROJECT_DIR}/artifacts
    - mkdir -p ${CI_PROJECT_DIR}/packages
    - GRADLE_USER_HOME="$(pwd)/.gradle"
    - export GRADLE_USER_HOME
    - choco install oraclejdk --version=17.0.2
    - choco install gradle --version=7.4
    - choco install wixtoolset --version=3.11.2
    - New-Item ${CI_PROJECT_DIR}/java/gradle.properties
    - Set-Content ${CI_PROJECT_DIR}/java/gradle.properties 'org.gradle.java.home=C:/Program Files/Java/jdk-17.0.2'
  script:
    - gradle build jpackage -x test --warning-mode all -p java -PsetupType=exe
    - cp java/build/release/windows/*.exe ${CI_PROJECT_DIR}/packages/${PROJECT_NAME}.exe
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/packages/${PROJECT_NAME}.exe
    expire_in: 5 minutes

build-gradle-msi:
  stage: build
  extends:
  - .windows_runners
  variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  before_script:
    - mkdir -p ${CI_PROJECT_DIR}/artifacts
    - mkdir -p ${CI_PROJECT_DIR}/packages
    - GRADLE_USER_HOME="$(pwd)/.gradle"
    - export GRADLE_USER_HOME
    - choco install oraclejdk --version=17.0.2
    - choco install gradle --version=7.4
    - choco install wixtoolset --version=3.11.2
    - New-Item ${CI_PROJECT_DIR}/java/gradle.properties
    - Set-Content ${CI_PROJECT_DIR}/java/gradle.properties 'org.gradle.java.home=C:/Program Files/Java/jdk-17.0.2'
  script:
    - gradle build jpackage -x test --warning-mode all -p java -PsetupType=msi
    - cp java/build/release/windows/*.msi ${CI_PROJECT_DIR}/packages/${PROJECT_NAME}.msi
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/packages/${PROJECT_NAME}.msi
    expire_in: 5 minutes

sign-dotnet-artifacts:
  stage: sign
  image: docker:19.03.0
  services:
    - docker:19.03.0-dind
  variables:
    COMMAND: "sign"
  before_script:
    - mkdir -p ${CI_PROJECT_DIR}/artifacts
    - mkdir -p ${CI_PROJECT_DIR}/packages
  script:
    - echo ${REGISTRY_PASSWORD} | docker login ghcr.io -u ${REGISTRY_USERNAME} --password-stdin
    - docker pull ghcr.io/bayrakmustafa/codesigner:latest
    - docker run -i --rm --dns 8.8.8.8 --network host --volume ${CI_PROJECT_DIR}/packages:/codesign/examples --volume ${CI_PROJECT_DIR}/artifacts:/codesign/output -e USERNAME=${USERNAME} -e PASSWORD=${PASSWORD} -e CREDENTIAL_ID=${CREDENTIAL_ID} -e TOTP_SECRET=${TOTP_SECRET} -e ENVIRONMENT_NAME=${ENVIRONMENT_NAME} ghcr.io/bayrakmustafa/codesigner:latest ${COMMAND} -input_file_path=/codesign/examples/${PROJECT_NAME}.dll -output_dir_path=/codesign/output
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/artifacts/${PROJECT_NAME}.dll
    expire_in: 1 days
  dependencies:
    - build-dotnet

sign-maven-artifacts:
  stage: sign
  image: docker:19.03.0
  services:
    - docker:19.03.0-dind
  variables:
    COMMAND: "sign"
  before_script:
    - mkdir -p ${CI_PROJECT_DIR}/artifacts
    - mkdir -p ${CI_PROJECT_DIR}/packages
    - cp ${CI_PROJECT_DIR}/packages/${PROJECT_NAME}.jar ${CI_PROJECT_DIR}/packages/${PROJECT_NAME}-Maven.jar
  script:
    - echo ${REGISTRY_PASSWORD} | docker login ghcr.io -u ${REGISTRY_USERNAME} --password-stdin
    - docker pull ghcr.io/bayrakmustafa/codesigner:latest
    - docker run -i --rm --dns 8.8.8.8 --network host --volume ${CI_PROJECT_DIR}/packages:/codesign/examples --volume ${CI_PROJECT_DIR}/artifacts:/codesign/output -e USERNAME=${USERNAME} -e PASSWORD=${PASSWORD} -e CREDENTIAL_ID=${CREDENTIAL_ID} -e TOTP_SECRET=${TOTP_SECRET} -e ENVIRONMENT_NAME=${ENVIRONMENT_NAME} ghcr.io/bayrakmustafa/codesigner:latest ${COMMAND} -input_file_path=/codesign/examples/${PROJECT_NAME}-Maven.jar -output_dir_path=/codesign/output
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/artifacts/${PROJECT_NAME}-Maven.jar
    expire_in: 1 days
  dependencies:
    - build-maven-jar

sign-gradle-artifacts:
  stage: sign
  image: docker:19.03.0
  services:
    - docker:19.03.0-dind
  variables:
    COMMAND: "sign"
  before_script:
    - mkdir -p ${CI_PROJECT_DIR}/artifacts
    - mkdir -p ${CI_PROJECT_DIR}/packages
    - cp ${CI_PROJECT_DIR}/packages/${PROJECT_NAME}.jar ${CI_PROJECT_DIR}/packages/${PROJECT_NAME}-Gradle.jar
  script:
    - echo ${REGISTRY_PASSWORD} | docker login ghcr.io -u ${REGISTRY_USERNAME} --password-stdin
    - docker pull ghcr.io/bayrakmustafa/codesigner:latest
    - docker run -i --rm --dns 8.8.8.8 --network host --volume ${CI_PROJECT_DIR}/packages:/codesign/examples --volume ${CI_PROJECT_DIR}/artifacts:/codesign/output -e USERNAME=${USERNAME} -e PASSWORD=${PASSWORD} -e CREDENTIAL_ID=${CREDENTIAL_ID} -e TOTP_SECRET=${TOTP_SECRET} -e ENVIRONMENT_NAME=${ENVIRONMENT_NAME} ghcr.io/bayrakmustafa/codesigner:latest ${COMMAND} -input_file_path=/codesign/examples/${PROJECT_NAME}-Gradle.jar -output_dir_path=/codesign/output
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/artifacts/${PROJECT_NAME}-Gradle.jar
    expire_in: 1 days
  dependencies:
    - build-gradle-jar