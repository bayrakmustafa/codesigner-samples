# The name of the workflow.
name: (MSI) Gradle Build and Sign

# Trigger this workflow on a workflow_call
on:
  workflow_call:
    secrets:
      ES_USERNAME:
        required: true
      ES_PASSWORD:
        required: true
      CREDENTIAL_ID:
        required: true
      ES_TOTP_SECRET: 
        required: true

# Create an environment variable
env:
  PROJECT_NAME: HelloWorld
  PROJECT_VERSION: 0.0.1
  GRADLE_VERSION: 7.3
  JAVA_VERSION: 17

jobs:
  # Defines job named "build-gradle-msi"
  build-gradle-msi:
    # Run job on Windows Runner
    runs-on: windows-latest
    # When the workflow runs, this is the name that is logged
    name: Build MSI File with Gradle
    steps:
      # 1) Check out the source code so that the workflow can access it.
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 2) Set up the Java environment for the workflow to use.
      - uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: ${{env.JAVA_VERSION}}

      # 3) Set up the Gradle environment for the workflow to use.
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{env.GRADLE_VERSION}}

      # 4) Install WIX for MSI Setup File
      - name: Windows Specific Setup
        run: |
          curl -OLS https://github.com/wixtoolset/wix3/releases/download/wix3111rtm/wix311.exe
          .\wix311.exe /install /quiet /norestart

      # 5) Add WIX to environment variable
      - name: Add path to PATH environment variable
        uses: myci-actions/export-env-var-powershell@1
        with:
          name: PATH
          value: $env:PATH;C:\Program Files (x86)\WiX Toolset v3.11\bin

      # 6) Create Artifact Directory to store signed and unsigned artifact files
      - name: Create Artifacts Directory
        shell: bash
        run: |
          mkdir ${GITHUB_WORKSPACE}/artifacts
          mkdir ${GITHUB_WORKSPACE}/packages

      # 7) Build a dotnet project or solution and all of its dependencies.
      #    After it has been created jar file, copy to 'packages' folder for siging
      - name: Compile Java Library with Gradle
        shell: bash
        run: |
          gradle build jpackage -x test --warning-mode all -p java
          cp java/build/release/windows/*.msi ${GITHUB_WORKSPACE}/packages/${{env.PROJECT_NAME}}.msi

      # 8) Save the MSI file to the artifacts directory for codesigning tool
      - name: Upload Setup File
        id: upload-installer-windows
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.PROJECT_NAME}}.msi
          path: ./packages/${{env.PROJECT_NAME}}.msi

  codesigner-msi:
    # Codesigner job only work with linux runner
    runs-on: ubuntu-latest
    # After run this job building job finished
    needs: [build-gradle-msi]
    # When the workflow runs, this is the name that is logged
    name: CodeSigner on MSI File
    steps:
      # 1) Download created msi file from Github Artifacts
      - name: Download Windows Installer File
        uses: actions/download-artifact@v2
        with:
          name: ${{env.PROJECT_NAME}}.msi

      # 2) Create Artifact Directory to store signed and unsigned artifact files
      - name: Create Artifacts Directory
        shell: bash
        run: |
          mkdir ${GITHUB_WORKSPACE}/artifacts

      # 3) This is the step where the created JAR (artifact) files will be signed with CodeSignTool.
      - name: Sign Artifact with CodeSignTool
        uses: bayrakmustafa/actions-codesigner@develop
        with:
          # Sign and timestamp code object.
          command: sign
          # SSL.com account username
          username: ${{secrets.ES_USERNAME}}
          # SSL.com account password.
          password: ${{secrets.ES_PASSWORD}}
          # Credential ID for signing certificate.
          credential_id: ${{secrets.CREDENTIAL_ID}}
          # OAuth TOTP Secret (https://www.ssl.com/how-to/automate-esigner-ev-code-signing)
          totp_secret: ${{secrets.ES_TOTP_SECRET}}
          # Path of code object to be signed. (DLL, EXE, JAR files vb... )
          file_path: ${{env.PROJECT_NAME}}.msi
          # Directory where signed code object(s) will be written.
          output_path: ${GITHUB_WORKSPACE}/artifacts

      # 4) This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete
      - name: Upload Signed Files
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.PROJECT_NAME}}.msi
          path: ./artifacts/${{env.PROJECT_NAME}}.msi