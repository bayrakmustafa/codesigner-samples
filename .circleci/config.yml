# Set the CI version.
version: 2.1

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# Workflows orchestrate a set of jobs to be run. The jobs for this pipeline are # configured below
workflows:
  # This is the name of the workflow, feel free to change it to better match your workflow.
  codesigner:
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - maven-jar
      - gradle-jar

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  maven-jar:
    # Create an environment variable
    environment:
        PROJECT_NAME: HelloWorld
        PROJECT_VERSION: 0.0.1
        REGISTRY_USERNAME: bayrakmustafa
        ENVIRONMENT_NAME: 'TEST'

    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:17.0.3
      - image: ghcr.io/bayrakmustafa/codesigner:latest
        auth:
          username: ${REGISTRY_USERNAME}
          password: ${REGISTRY_PASSWORD}
        command: [/entrypoint.sh]
    
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout

      # Create Artifact Directory to store signed and unsigned artifact files
      - run:
          name: Create Artifacts Directory
          command: |
            mkdir -p ${CIRCLE_WORKING_DIRECTORY}/artifacts
            mkdir -p ${CIRCLE_WORKING_DIRECTORY}/packages

      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Compile Java Library with Maven
          command: | 
            mvn clean install -f java/pom.xml

      # Copy artifact to artifacts directory
      - run:
          name: Copy Artifact File
          command: | 
            cp java/target/${PROJECT_NAME}-${PROJECT_VERSION}.jar ${CIRCLE_WORKING_DIRECTORY}/packages/${PROJECT_NAME}.jar
            cp java/target/${PROJECT_NAME}-${PROJECT_VERSION}.jar /tmp/${PROJECT_NAME}-Maven.jar

      # This is the step where the created JAR (artifact) files will be signed with CodeSignTool.
      - run:
          name: Sign Artifact File
          command: |
            /entrypoint.sh sign -input_file_path=${WORKSPACE}/packages/${PROJECT_NAME}-Maven.jar -output_dir_path=${WORKSPACE}/artifacts
            cp ${WORKSPACE}/artifacts/${PROJECT_NAME}-Maven.jar /tmp/${PROJECT_NAME}-Maven.jar

      # This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete
      - store_artifacts:
          name: Upload Signed Files
          path: /tmp/HelloWorld-Maven.jar
          destination: HelloWorld-Maven.jar

  gradle-jar:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
      # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
      # Be sure to update the Docker image tag below to openjdk version of your application.
      # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
      - image: cimg/openjdk:17.0.3

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=4"
      PROJECT_NAME: HelloWorld
      PROJECT_VERSION: 0.0.1

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout

      # Create Artifact Directory to store signed and unsigned artifact files
      - run:
          name: Create Artifacts Directory
          command: |
            mkdir -p ${CIRCLE_WORKING_DIRECTORY}/artifacts
            mkdir -p ${CIRCLE_WORKING_DIRECTORY}/packages

      # Download and cache dependencies
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "java/build.gradle" }}

      # Build the project
      - run: gradle clean build -p java -PsetupType=jar

      # Copy artifact to artifacts directory
      - run:
          name: Copy Artifact File
          command: | 
            cp java/build/libs/${PROJECT_NAME}-${PROJECT_VERSION}.jar ${CIRCLE_WORKING_DIRECTORY}/packages/${PROJECT_NAME}.jar
            cp java/build/libs/${PROJECT_NAME}-${PROJECT_VERSION}.jar /tmp/${PROJECT_NAME}-Gradle.jar

      # This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete
      - store_artifacts:
          name: Upload Signed Files
          path: /tmp/HelloWorld-Gradle.jar
          destination: HelloWorld-Gradle.jar

      # Save gradle caches
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "java/build.gradle" }}
