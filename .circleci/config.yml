# Set the CI version.
version: 2.1

# Orbs are shareable packages of CircleCI configuration you can use to simplify your builds.
orbs: 
  gradle: circleci/gradle@2.2.0

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# Workflows orchestrate a set of jobs to be run. The jobs for this pipeline are # configured below
workflows:
  # This is the name of the workflow, feel free to change it to better match your workflow.
  codesigner-dotnet-dll:
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - dotnet-build-dll
      - codesigner-sign-artifact:
          requires:
            - dotnet-build-dll
          artifact-name: 'HelloWorld.dll'

  # This is the name of the workflow, feel free to change it to better match your workflow.
  codesigner-maven-jar:
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - maven-build-jar
      - codesigner-sign-artifact:
          requires:
            - maven-build-jar
          artifact-name: 'HelloWorld-Maven.jar'


  # This is the name of the workflow, feel free to change it to better match your workflow.
  codesigner-gradle-jar:
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - gradle-build-jar
      - codesigner-sign-artifact:
          requires:
            - gradle-build-jar
          artifact-name: 'HelloWorld-Gradle.jar'

  # This is the name of the workflow, feel free to change it to better match your workflow.
  codesigner-powershell-ps1:
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - powershell-build-ps1
      - codesigner-sign-artifact:
          requires:
            - powershell-build-ps1
          artifact-name: 'HelloWorld.ps1'

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  dotnet-build-dll:
    # Create an environment variable
    environment:
        PROJECT_NAME: HelloWorld
        PROJECT_VERSION: 0.0.1
        DOTNET_VERSION: 3.1
        WORKSPACE: /home/circleci/project

    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:3.1-bullseye

    working_directory: /home/circleci/project
    
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout

      # Create Artifact Directory to store signed and unsigned artifact files
      - run:
          name: Create Artifacts Directory
          command: |
            mkdir -p ${WORKSPACE}/artifacts
            mkdir -p ${WORKSPACE}/packages

      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Compile Dotnet Library with Dotnet Core
          command: | 
            dotnet build dotnet/${PROJECT_NAME}.csproj -c Release

      # Copy artifact to artifacts directory
      - run:
          name: Copy Artifact File
          command: | 
            cp dotnet/bin/Release/netcoreapp${DOTNET_VERSION}/${PROJECT_NAME}-${PROJECT_VERSION}.dll ${WORKSPACE}/packages/HelloWorld.dll

      - persist_to_workspace:
          root: .
          paths:
            - packages/*

  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  maven-build-jar:
    # Create an environment variable
    environment:
        PROJECT_NAME: HelloWorld
        PROJECT_VERSION: 0.0.1
        WORKSPACE: /home/circleci/project

    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:17.0.3

    working_directory: /home/circleci/project
    
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout

      # Create Artifact Directory to store signed and unsigned artifact files
      - run:
          name: Create Artifacts Directory
          command: |
            mkdir -p ${WORKSPACE}/artifacts
            mkdir -p ${WORKSPACE}/packages

      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Compile Java Library with Maven
          command: | 
            mvn clean install -f java/pom.xml

      # Copy artifact to artifacts directory
      - run:
          name: Copy Artifact File
          command: | 
            cp java/target/${PROJECT_NAME}-${PROJECT_VERSION}.jar ${WORKSPACE}/packages/HelloWorld-Maven.jar

      - persist_to_workspace:
          root: .
          paths:
            - packages/*

  gradle-build-jar:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
      # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
      # Be sure to update the Docker image tag below to openjdk version of your application.
      # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
      - image: cimg/openjdk:17.0.3

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=4"
      PROJECT_NAME: HelloWorld
      PROJECT_VERSION: 0.0.1
      WORKSPACE: /home/circleci/project

    working_directory: /home/circleci/project

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout

      # Create Artifact Directory to store signed and unsigned artifact files
      - run:
          name: Create Artifacts Directory
          command: |
            mkdir -p ${WORKSPACE}/artifacts
            mkdir -p ${WORKSPACE}/packages

      # Download and cache dependencies
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "java/build.gradle" }}

      # Build the project
      - gradle/run:
          command: clean build -p java -PsetupType=jar

      # Copy artifact to artifacts directory
      - run:
          name: Copy Artifact File
          command: | 
            cp java/build/libs/${PROJECT_NAME}-${PROJECT_VERSION}.jar ${WORKSPACE}/packages/HelloWorld-Gradle.jar

      # Save gradle caches
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "java/build.gradle" }}

      - persist_to_workspace:
          root: .
          paths:
            - packages/*
  
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  powershell-build-ps1:
    # Create an environment variable
    environment:
        PROJECT_NAME: HelloWorld
        WORKSPACE: /home/circleci/project

    # These next lines define a linux virtual machine executor: https://circleci.com/docs/2.0/executor-types/
    machine: true

    working_directory: /home/circleci/project
    
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout

      # Create Artifact Directory to store signed and unsigned artifact files
      - run:
          name: Create Artifacts Directory
          command: |
            mkdir -p ${WORKSPACE}/artifacts
            mkdir -p ${WORKSPACE}/packages

      # Copy artifact to artifacts directory
      - run:
          name: Copy Artifact File
          command: | 
            cp powershell/${PROJECT_NAME}.ps1 ${WORKSPACE}/packages/HelloWorld.ps1

      - persist_to_workspace:
          root: .
          paths:
            - packages/*

  codesigner-sign-artifact:
      # Create an environment variable
      environment:
          REGISTRY_USERNAME: bayrakmustafa
          ENVIRONMENT_NAME: TEST
          COMMAND: sign
          WORKSPACE: /home/circleci/project

      parameters:
          artifact-name:
            type: string
            default: ''

      # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
      # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
      # Be sure to update the Docker image tag below to openjdk version of your application.
      # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
      docker:
        - image: cimg/openjdk:17.0.3

      working_directory: /home/circleci/project

      # Add steps to the job
      # See: https://circleci.com/docs/2.0/configuration-reference/#steps
      steps:
        # Create Artifact Directory to store signed and unsigned artifact files
        - run:
            name: Create Artifacts Directory
            command: |
              mkdir -p ${WORKSPACE}/artifacts
              mkdir -p ${WORKSPACE}/packages

        - attach_workspace:
            at: /home/circleci/project

        # Enable docker for CodeSigner
        - setup_remote_docker:
            name: Setup Remote Docker
            version: 19.03.13
            docker_layer_caching: true

        # Pull Codesigner Docker Image From Github Registry
        - run:
            name: Docker Pull Image
            command: |
              echo ${REGISTRY_PASSWORD} | docker login ghcr.io -u ${REGISTRY_USERNAME} --password-stdin
              docker pull ghcr.io/bayrakmustafa/codesigner:latest
              docker pull alpine:3.4

        # This is the step where the created JAR (artifact) files will be signed with CodeSignTool.
        - run:
            name: Sign Artifact File
            command: |
              docker create -v /codesign/packages  --name codesign-in  alpine:3.4 /bin/true
              docker create -v /codesign/artifacts --name codesign-out alpine:3.4 /bin/true
              docker cp ${WORKSPACE}/packages/<< parameters.artifact-name >> codesign-in:/codesign/packages
              docker run -i --rm --dns 8.8.8.8 --network host --volumes-from codesign-in --volumes-from codesign-out -e USERNAME=${USERNAME} -e PASSWORD=${PASSWORD} -e CREDENTIAL_ID=${CREDENTIAL_ID} -e TOTP_SECRET=${TOTP_SECRET} -e ENVIRONMENT_NAME=${ENVIRONMENT_NAME} ghcr.io/bayrakmustafa/codesigner:latest ${COMMAND} -input_file_path=/codesign/packages/<< parameters.artifact-name >> -output_dir_path=/codesign/artifacts
              docker cp codesign-out:/codesign/artifacts/<< parameters.artifact-name >> ${WORKSPACE}/artifacts/<< parameters.artifact-name >>

        # This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete
        - store_artifacts:
            name: Upload Signed Files
            path: /home/circleci/project/artifacts/<< parameters.artifact-name >>
            destination: << parameters.artifact-name >>