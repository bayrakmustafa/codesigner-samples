# The CPU Architecture to run the job on
arch: amd64

# Defines environment variables globally. Job level property overrides global variables
env:
  global:
    - PROJECT_NAME="HelloWorld"
    - PROJECT_VERSION="0.0.1"
    - DOTNET_VERSION="3.1"
    - TERM=dumb
    - ENVIRONMENT_NAME="TEST"

# Default language to run tests in
language: java

# The Ubuntu distribution to use
dist: bionic

# The Operating System to run the job on
os: linux

# Specifies the order of build stages. All jobs in one stage must complete before next stage is executed.
stages:
  - build
  - sign

jobs:
  include:
    - stage: build
      # The job name
      name: build-gradle-exe
      # The operating system to run the job on
      os: windows
      # Use docker command for signing   
      services:
        - docker
      # Use default generic lang
      language: c
      # Cache gradle directory in order to speed up
      cache:
        directories:
        - "$HOME/.gradle/caches/"
        - "$HOME/.gradle/wrapper/"
      # Before script to run before building the project
      before_script: 
        # Created directories for artifacts
        - mkdir -p ${TRAVIS_BUILD_DIR}/artifacts
        - mkdir -p ${TRAVIS_BUILD_DIR}/packages
        # Set GRADLE home for building Java project
        - export GRADLE_OPTS="-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=4"
        # Enable .NET Framework Core for building .NET project with WIX
        - powershell.exe -ExecutionPolicy Bypass Install-WindowsFeature Net-Framework-Core
        # Enable global confirmation for choco package installation
        - choco feature enable -n allowGlobalConfirmation
        # Install Dotnet3.5
        - choco install dotnet3.5 --version=3.5.20160716 -y
        # Install Oracle JDK 17.0.2
        - choco install oraclejdk --version=17.0.2 -y
        # Install Gradle 7.4
        - choco install gradle --version=7.4 -y
        # Install WIX 3.11.2
        - choco install wixtoolset --version=3.11.2 -y
        # Set JAVA HOME for building Java project
        - export JAVA_HOME="C:/PROGRA~1/Java/jdk-17.0.2"
        - export PATH="$JAVA_HOME/bin:$PATH"
        # Set Default JDK version for Gradle Build
        - powershell.exe -ExecutionPolicy Bypass New-Item ${TRAVIS_BUILD_DIR}/java/gradle.properties
        - powershell.exe -ExecutionPolicy Bypass Set-Content ${TRAVIS_BUILD_DIR}/java/gradle.properties "org.gradle.java.home=C:/PROGRA~1/Java/jdk-17.0.2"
        - powershell.exe -ExecutionPolicy Bypass Add-Content ${TRAVIS_BUILD_DIR}/java/gradle.properties "org.gradle.daemon=false"
        - powershell.exe -ExecutionPolicy Bypass Add-Content ${TRAVIS_BUILD_DIR}/java/gradle.properties "org.gradle.workers.max=4"
      # Script to build the project
      script: 
        # Build Gradle project for EXE artifact with jpackage
        - gradle build jpackage -x test --warning-mode all -p java -PsetupType=exe --no-daemon
        # Copy built artifacts to artifacts directory
        - powershell.exe -ExecutionPolicy Bypass Copy-Item "java/build/release/windows/*.exe" -Destination "${TRAVIS_BUILD_DIR}/packages/${PROJECT_NAME}.exe"
      # Used to specify a list of files and directories that should be attached to the job if it succeeds.
      workspaces:
        create:
          name: gradle-exe-artifacts
          paths:
            # Save artifact in order to use signing job
            - ${TRAVIS_BUILD_DIR}/packages/${PROJECT_NAME}.exe

    - stage: sign
      # The job name
      name: sign-gradle-exe-artifacts
      # The Ubuntu distribution to use
      dist: bionic
      # Use docker command for signing   
      services:
        - docker
      # Defines environment variables for specific jobs.
      env:
        COMMAND="sign"
      # Use dotnet-cli to build the project
      language: java
      # Java version to build the project
      jdk: 
      - oraclejdk17
      # Before script to run before building the project
      before_script: 
        # Created directories for artifacts
        - mkdir -p ${TRAVIS_BUILD_DIR}/artifacts
        - mkdir -p ${TRAVIS_BUILD_DIR}/packages
        # Defines environment variables locally
        - export TRAVIS_REPO_OWNER=${TRAVIS_REPO_SLUG%/*}
        - export TRAVIS_REPO_NAME=${TRAVIS_REPO_SLUG#*/}
        # Copy artifact to artifacts directory
        - find ${TRAVIS_BUILD_DIR} -iname ${PROJECT_NAME}.exe
        - cp ~/C:/Users/travis/build/${TRAVIS_REPO_OWNER}/${TRAVIS_REPO_NAME}/packages/${PROJECT_NAME}.exe ${TRAVIS_BUILD_DIR}/packages/${PROJECT_NAME}.exe
      # Script to build the project
      script: 
        # Docker Pull CodeSigner Docker Image
        - docker pull ghcr.io/bayrakmustafa/codesigner:latest
        # Sign artifact with CodeSigner docker image
        - docker run -i --rm --dns 8.8.8.8 --network host --volume ${TRAVIS_BUILD_DIR}/packages:/codesign/examples --volume ${TRAVIS_BUILD_DIR}/artifacts:/codesign/output -e USERNAME=${USERNAME} -e PASSWORD=${PASSWORD} -e CREDENTIAL_ID=${CREDENTIAL_ID} -e TOTP_SECRET=${TOTP_SECRET} -e ENVIRONMENT_NAME=${ENVIRONMENT_NAME} ghcr.io/bayrakmustafa/codesigner:latest ${COMMAND} -input_file_path=/codesign/examples/${PROJECT_NAME}.exe -output_dir_path=/codesign/output
      # Used to specify a list of files and directories that should be attached to the job if it succeeds.
      workspaces:
        use:
          - gradle-exe-artifacts
        create:
          name: gradle-signed-exe-artifacts
          paths:
            # Save signed artifact
            - ${TRAVIS_BUILD_DIR}/artifacts/${PROJECT_NAME}.exe
